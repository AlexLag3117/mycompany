MODULE PosDashboardPayment;

REQUIRE PosDashboard, PaymentMethod, IncomingPaymentDebt, PosPaymentMethod, SessionPayment;

NAMESPACE Retail;

amount 'Сумма' = DATA LOCAL NUMERIC[14,2] (PaymentMethod);
paymentAmount() = GROUP SUM amount(PaymentMethod pm); 
notCashPaymentAmount() = GROUP SUM amount(PaymentMethod pm) IF NOT isCash(pm); 

change (Invoice i) = paymentAmount() (-) amount(i); 

FORM posPayment 'Оплата'
    OBJECTS i = Invoice PANEL
    PROPERTIES nameCustomer(i), amount(i), change 'Сдача' = change(i) IF change(i) > 0
    
    OBJECTS pm = PaymentMethod
    PROPERTIES(pm) name READONLY, amount 
    FILTERS NOT disabled(pos(session(i)), pm)
    
    PROPERTIES overFormOk = formOk() READONLYIF (change(i) < 0 OR notCashPaymentAmount() > amount(i)) AND paymentAmount() 
;

DESIGN posPayment {
    OBJECTS {
        NEW top {
            alignment = STRETCH;
            MOVE PROPERTY(nameCustomer(i)) { fontSize = 24; alignment = STRETCH; changeKey = 'F5'; }
        }
        NEW pane {
            type = CONTAINERH;
            fill = 1;
            NEW center {
                fill = 1;
                MOVE PROPERTY(amount(i)) { fontSize = 24; alignment = STRETCH; }
                MOVE BOX(pm) {
                    GRID(pm) {
                        defaultComponent = TRUE;
                        PROPERTY(name(pm)) { fontSize = 32; focusable = FALSE; }
                        PROPERTY(amount(pm)) { fontSize = 32; }
                    }
                    REMOVE TOOLBARBOX(pm);
                }
                MOVE PROPERTY(change) { fontSize = 24; alignment = STRETCH; }
            }
            NEW right { alignment = STRETCH; }
        }
    }
    TOOLBARRIGHT {
        REMOVE PROPERTY(formRefresh());
        REMOVE PROPERTY(formOk());
        PROPERTY(formClose()) { fontSize = 24; fill = 1; }
        MOVE PROPERTY(overFormOk) { fontSize = 24; fill = 1; }
    }
}

EXTEND FORM posPayment
    EVENTS ON INIT { ACTIVATE PROPERTY posPayment.amount(pm); }
;

@defineKeyboardDecimal(amount, posPayment, PaymentMethod, pm, keyboard, 64){

    setPosPaymentAmount (PaymentMethod o, INTEGER i) {
        IF NOT amount(o) = NUMERIC(keyboardDecimalInput()) THEN keyboardDecimalInput() <- NULL;
        keyboardDecimalInput() <- CONCAT '', keyboardDecimalInput(), STRING(i);
        amount(o) <- NUMERIC(keyboardDecimalInput());
    }
    
    DESIGN posPayment {
        right {
            NEW keyboard {
                fill = 1;
                type = COLUMNS;
                columns = 3;
            }
        }
    }
    
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount){
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 0){
    posPaymentPress0 '0' (PaymentMethod o) {
        setPosPaymentAmount(o, 0);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress0(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress0(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 1){
    posPaymentPress1 '1' (PaymentMethod o) {
        setPosPaymentAmount(o, 1);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress1(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress1(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 2){
    posPaymentPress2 '2' (PaymentMethod o) {
        setPosPaymentAmount(o, 2);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress2(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress2(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 3){
    posPaymentPress3 '3' (PaymentMethod o) {
        setPosPaymentAmount(o, 3);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress3(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress3(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 4){
    posPaymentPress4 '4' (PaymentMethod o) {
        setPosPaymentAmount(o, 4);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress4(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress4(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 5){
    posPaymentPress5 '5' (PaymentMethod o) {
        setPosPaymentAmount(o, 5);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress5(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress5(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 6){
    posPaymentPress6 '6' (PaymentMethod o) {
        setPosPaymentAmount(o, 6);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress6(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress6(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 7){
    posPaymentPress7 '7' (PaymentMethod o) {
        setPosPaymentAmount(o, 7);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress7(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress7(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 8){
    posPaymentPress8 '8' (PaymentMethod o) {
        setPosPaymentAmount(o, 8);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress8(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress8(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPayment, PaymentMethod, pm, keyboard, 64, setPosPaymentAmount, 9){
    posPaymentPress9 '9' (PaymentMethod o) {
        setPosPaymentAmount(o, 9);
    }
    EXTEND FORM posPayment PROPERTIES posPaymentPress9(pm);
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPress9(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
};
    
    posPaymentPressD '.' (PaymentMethod o) {
        IF NOT isSubstring(keyboardDecimalInput(), '.') THEN
            keyboardDecimalInput() <- keyboardDecimalInput() + '.'; 
    }
    
    posPaymentPressC 'C' (PaymentMethod o) {
        amount(o) <- NULL;
    }
    
    EXTEND FORM posPayment
        PROPERTIES(pm) posPaymentPressD, posPaymentPressC
    
        EVENTS ON CHANGE pm { keyboardDecimalInput() <- NULL; }
    ;
    
    DESIGN posPayment {
        keyboard {
            MOVE PROPERTY(posPaymentPressD(pm)) { fill = 1; fontSize = 64; focusable = FALSE; };
            MOVE PROPERTY(posPaymentPress0(pm));
            MOVE PROPERTY(posPaymentPressC(pm)) { fill = 1; fontSize = 64; focusable = FALSE; };
        }
    }

};

afterPosPayment ABSTRACT LIST (Invoice);

posPayment 'Оплата' (Session s, Invoice i) {
    amount(PaymentMethod pm) <- NULL;
    DIALOG posPayment OBJECTS i = i, pm INPUT NOMANAGESESSION DO {
        IF NOT paymentAmount() THEN amount(pm) <- amount(i);
        FOR am = (amount(PaymentMethod ppm) (-) (change(i) IF isCash(ppm))) DO NEW p = IncomingPayment {
            done(p) <- TRUE;
            
            paymentMethod(p, i) <- ppm;
            type(p) <- incomingPaymentType(ppm);
            
            company(p) <- company(pos(session(i)));
            companyAccount(p) <- account(pos(session(i)), ppm);
            
            partner(p) <- customer(i);
            
            amount(p) <- am;
            paid(p, i) <- am;
        }
        APPLY;
        IF canceled() THEN {
            DELETE IncomingPayment p WHERE SET(p IS IncomingPayment);
        } ELSE {
            createInvoice(s);
            afterPosPayment(i);
        }
    }
} CHANGEKEY 'ctrl ENTER';

EXTEND FORM posDashboard
    PROPERTIES(s, i) posPayment READONLYIF NOT amount(i)
;

DESIGN posDashboard {
    actions {
        MOVE PROPERTY(posPayment(s, i)) { fill = 1; fontStyle = 'bold'; }
    }
}

// payment method total
EXTEND FORM posDashboard
    OBJECTS pm = PaymentMethod BEFORE si
    PROPERTIES READONLY paid(s, pm) COLUMNS (pm) HEADER name(pm) 

    PROPERTIES READONLY paid(si, pm) COLUMNS (pm) HEADER name(pm) 
;

DESIGN posDashboard {
    sessionTotal {
        MOVE PROPERTY(paid(s, pm));
    }
}
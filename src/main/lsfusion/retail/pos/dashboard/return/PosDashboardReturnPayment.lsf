MODULE PosDashboardReturnPayment;

REQUIRE PosDashboardReturn, PosDashboardPayment, CreditNote, OutgoingPaymentDone;

NAMESPACE Retail;

invoicePaid 'Оплачено' (Bill b, PaymentMethod pm) = GROUP SUM paid(Invoice i, pm) IF in(i, b);
invalidAmount(Bill b, PaymentMethod pm) = amount(pm) > OVERRIDE invoicePaid(b, pm), 0.0; 

FORM posPaymentReturn 'Оплата'
    OBJECTS b = Bill PANEL
    PROPERTIES nameVendor(b), amount(b)
    
    OBJECTS pm = PaymentMethod
    PROPERTIES name(pm) READONLY, invoicePaid(b, pm), amount(pm) BACKGROUND invalidAmount(b, pm)
    FILTERS NOT disabled(pos(session(b)), pm)
    
    PROPERTIES overFormOk = formOk() 
        READONLYIF NOT paymentAmount() = amount(b) OR GROUP SUM 1 IF invalidAmount(b, PaymentMethod ppm) 
;

DESIGN posPaymentReturn {
    OBJECTS {
        NEW top {
            alignment = STRETCH;
            MOVE PROPERTY(nameVendor(b)) { fontSize = 24; alignment = STRETCH; changeKey = 'F5'; }
        }
        NEW pane {
            type = CONTAINERH;
            fill = 1;
            NEW center {
                fill = 1;
                MOVE PROPERTY(amount(b)) { fontSize = 24; alignment = STRETCH; }
                MOVE BOX(pm) {
                    GRID(pm) {
                        defaultComponent = TRUE;
                        PROPERTY(name(pm)) { fontSize = 24; focusable = FALSE; }
                        PROPERTY(invoicePaid(b, pm)) { fontSize = 24; }
                        PROPERTY(amount(pm)) { fontSize = 24; }
                    }
                    REMOVE TOOLBARBOX(pm);
                }
            }
            NEW right { alignment = STRETCH; }
        }
    }
    
    TOOLBARRIGHT {
        REMOVE PROPERTY(formRefresh());
        REMOVE PROPERTY(formOk());
        PROPERTY(formClose()) { fontSize = 24; fill = 1; }
        MOVE PROPERTY(overFormOk) { fontSize = 24; fill = 1; }
    }
}

EXTEND FORM posPaymentReturn
    EVENTS ON INIT { ACTIVATE PROPERTY posPaymentReturn.amount(pm); }
;

@defineKeyboardDecimal(amount, posPaymentReturn, PaymentMethod, pm, keyboard, 64){

    setPosPaymentReturnAmount (PaymentMethod o, INTEGER i) {
        IF NOT amount(o) = NUMERIC(keyboardDecimalInput()) THEN keyboardDecimalInput() <- NULL;
        keyboardDecimalInput() <- CONCAT '', keyboardDecimalInput(), STRING(i);
        amount(o) <- NUMERIC(keyboardDecimalInput());
    }
    
    DESIGN posPaymentReturn {
        right {
            NEW keyboard {
                fill = 1;
                type = COLUMNS;
                columns = 3;
            }
        }
    }
    
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount){
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 0){
    posPaymentReturnPress0 '0' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 0);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress0(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress0(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 1){
    posPaymentReturnPress1 '1' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 1);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress1(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress1(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 2){
    posPaymentReturnPress2 '2' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 2);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress2(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress2(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 3){
    posPaymentReturnPress3 '3' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 3);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress3(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress3(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 4){
    posPaymentReturnPress4 '4' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 4);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress4(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress4(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 5){
    posPaymentReturnPress5 '5' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 5);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress5(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress5(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 6){
    posPaymentReturnPress6 '6' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 6);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress6(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress6(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 7){
    posPaymentReturnPress7 '7' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 7);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress7(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress7(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 8){
    posPaymentReturnPress8 '8' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 8);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress8(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress8(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
    @defineKeyboard(posPaymentReturn, PaymentMethod, pm, keyboard, 64, setPosPaymentReturnAmount, 9){
    posPaymentReturnPress9 '9' (PaymentMethod o) {
        setPosPaymentReturnAmount(o, 9);
    }
    EXTEND FORM posPaymentReturn PROPERTIES posPaymentReturnPress9(pm);
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPress9(pm)) { fill = 1; fontSize = '64'; focusable = FALSE; }
        }
    }
};
};
    
    posPaymentReturnPressD '.' (PaymentMethod o) {
        IF NOT isSubstring(keyboardDecimalInput(), '.') THEN
            keyboardDecimalInput() <- keyboardDecimalInput() + '.'; 
    }
    
    posPaymentReturnPressC 'C' (PaymentMethod o) {
        amount(o) <- NULL;
    }
    
    EXTEND FORM posPaymentReturn
        PROPERTIES(pm) posPaymentReturnPressD, posPaymentReturnPressC
    
        EVENTS ON CHANGE pm { keyboardDecimalInput() <- NULL; }
    ;
    
    DESIGN posPaymentReturn {
        keyboard {
            MOVE PROPERTY(posPaymentReturnPressD(pm)) { fill = 1; fontSize = 64; focusable = FALSE; };
            MOVE PROPERTY(posPaymentReturnPress0(pm));
            MOVE PROPERTY(posPaymentReturnPressC(pm)) { fill = 1; fontSize = 64; focusable = FALSE; };
        }
    }

};

posPayment 'Оплата' (Session s, Bill b) {
    amount(PaymentMethod pm) <- NULL;
    DIALOG posPaymentReturn OBJECTS b = b NOMANAGESESSION DO {
        FOR am = amount(PaymentMethod pm) DO NEW p = OutgoingPayment {
            done(p) <- TRUE;
            
            paymentMethod(b, p) <- pm;
            type(p) <- outgoingPaymentType(pm);
            
            company(p) <- company(pos(session(b)));
            companyAccount(p) <- account(pos(session(b)), pm);
            
            partner(p) <- vendor(b);
            
            amount(p) <- am;
            paid(b, p) <- am;
        }
        APPLY;
        IF canceled() THEN {
            DELETE IncomingPayment p WHERE SET(p IS IncomingPayment);
        } ELSE {
            createInvoice(s);
        }
    }
} CHANGEKEY 'ctrl ENTER';

EXTEND FORM posDashboard
    PROPERTIES(s, b) posPayment READONLYIF NOT amount(b)
;

DESIGN posDashboard {
    billActions {
        MOVE PROPERTY(posPayment(s, b)) { fill = 1; fontStyle = 'bold'; }
    }
}

// payment method total
EXTEND FORM posDashboard
    PROPERTIES READONLY paid(sb, pm) COLUMNS (pm) HEADER name(pm) 
;